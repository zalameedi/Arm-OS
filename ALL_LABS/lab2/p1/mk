LIBPATH=/usr/lib/gcc/arm-none-eabi/6.3.1/

# 1. What does the following statement do?___________________________________
arm-none-eabi-as -mcpu=arm926ej-s -g ts.s -o ts.o
#invokes the assembler in the ARM toolchain (i.e. arm-none-eabi-as) to create an object file

# 2. What does the following statement do?___________________________________
arm-none-eabi-gcc -c -mcpu=arm926ej-s -g t.c -o t.o
#invokes the compiler in the ARM toolchain to compile the C code and create an object file

# 3. What does the following statement do?___________________________________
#arm-none-eabi-ld -T t.ld ts.o t.o -o t.elf
#runs the linker from the toolchain/cross-compiler to generate an .elf file, this is similar to the a.out
#file we had previously whilst compiling and executing on Linux machinem but it is not executable

arm-none-eabi-ld -T t.ld -L $LIBPATH ts.o t.o -o t.elf -lgcc #-lstr

# 4. What does the following statement do?___________________________________
arm-none-eabi-objcopy -O binary t.elf t.bin
#converts the ELF file to an executable bin file

#print ELF file
arm-none-eabi-readelf -a t.elf

rm *.o *.elf

echo ready to go?
read dummy

#qemu-system-arm -M versatilepb -m 128M -kernel t.bin -serial mon:stdio
qemu-system-arm -M realview-pbx-a9 -m 128M -kernel t.bin \
-serial mon:stdio -serial /dev/pts/1 -serial /dev/pts/2 -serial /dev/pts/3
 
 



 





